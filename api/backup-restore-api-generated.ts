/* tslint:disable */
/* eslint-disable */
/*
WhatsApp Business API

See https://developers.facebook.com/docs/whatsapp

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BackupSettingsRequestBody } from '../models';
// @ts-ignore
import { BackupSettingsResponse } from '../models';
// @ts-ignore
import { RestoreSettingsRequestBody } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BackupRestoreApi - axios parameter creator
 * @export
 */
export const BackupRestoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Backup-Settings
         * @param {BackupSettingsRequestBody} backupSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPost: async (backupSettingsRequestBody: BackupSettingsRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backupSettingsRequestBody' is not null or undefined
            assertParamExists('settingsPost', 'backupSettingsRequestBody', backupSettingsRequestBody)
            const localVarPath = `/settings/backup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: backupSettingsRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/settings/backup',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(backupSettingsRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore-Settings
         * @param {RestoreSettingsRequestBody} restoreSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPost_1: async (restoreSettingsRequestBody: RestoreSettingsRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restoreSettingsRequestBody' is not null or undefined
            assertParamExists('settingsPost_1', 'restoreSettingsRequestBody', restoreSettingsRequestBody)
            const localVarPath = `/settings/restore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: restoreSettingsRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/settings/restore',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(restoreSettingsRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackupRestoreApi - functional programming interface
 * @export
 */
export const BackupRestoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackupRestoreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Backup-Settings
         * @param {BackupRestoreApiSettingsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsPost(requestParameters: BackupRestoreApiSettingsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackupSettingsResponse>> {
            const backupSettingsRequestBody: BackupSettingsRequestBody = {
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsPost(backupSettingsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Restore-Settings
         * @param {BackupRestoreApiSettingsPost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsPost_1(requestParameters: BackupRestoreApiSettingsPost0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const restoreSettingsRequestBody: RestoreSettingsRequestBody = {
                data: requestParameters.data,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsPost_1(restoreSettingsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BackupRestoreApi - factory interface
 * @export
 */
export const BackupRestoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackupRestoreApiFp(configuration)
    return {
        /**
         * 
         * @summary Backup-Settings
         * @param {BackupRestoreApiSettingsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPost(requestParameters: BackupRestoreApiSettingsPostRequest, options?: AxiosRequestConfig): AxiosPromise<BackupSettingsResponse> {
            return localVarFp.settingsPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore-Settings
         * @param {BackupRestoreApiSettingsPost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPost_1(requestParameters: BackupRestoreApiSettingsPost0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.settingsPost_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for settingsPost operation in BackupRestoreApi.
 * @export
 * @interface BackupRestoreApiSettingsPostRequest
 */
export type BackupRestoreApiSettingsPostRequest = {
    
} & BackupSettingsRequestBody

/**
 * Request parameters for settingsPost_1 operation in BackupRestoreApi.
 * @export
 * @interface BackupRestoreApiSettingsPost0Request
 */
export type BackupRestoreApiSettingsPost0Request = {
    
} & RestoreSettingsRequestBody

/**
 * BackupRestoreApiGenerated - object-oriented interface
 * @export
 * @class BackupRestoreApiGenerated
 * @extends {BaseAPI}
 */
export class BackupRestoreApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Backup-Settings
     * @param {BackupRestoreApiSettingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupRestoreApiGenerated
     */
    public settingsPost(requestParameters: BackupRestoreApiSettingsPostRequest, options?: AxiosRequestConfig) {
        return BackupRestoreApiFp(this.configuration).settingsPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore-Settings
     * @param {BackupRestoreApiSettingsPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupRestoreApiGenerated
     */
    public settingsPost_1(requestParameters: BackupRestoreApiSettingsPost0Request, options?: AxiosRequestConfig) {
        return BackupRestoreApiFp(this.configuration).settingsPost_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
