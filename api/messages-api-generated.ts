/* tslint:disable */
/* eslint-disable */
/*
WhatsApp Business API

See https://developers.facebook.com/docs/whatsapp

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Audio } from '../models';
// @ts-ignore
import { Contact } from '../models';
// @ts-ignore
import { Document } from '../models';
// @ts-ignore
import { Hsm } from '../models';
// @ts-ignore
import { Image } from '../models';
// @ts-ignore
import { Location } from '../models';
// @ts-ignore
import { MarkMessageAsReadRequestBody } from '../models';
// @ts-ignore
import { MessageResponse } from '../models';
// @ts-ignore
import { MessageType } from '../models';
// @ts-ignore
import { SendMessageRequestBody } from '../models';
// @ts-ignore
import { Text } from '../models';
// @ts-ignore
import { Video } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Mark-Message-As-Read
         * @param {string} messageID Message ID from Webhook
         * @param {MarkMessageAsReadRequestBody} markMessageAsReadRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsRead: async (messageID: string, markMessageAsReadRequestBody: MarkMessageAsReadRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageID' is not null or undefined
            assertParamExists('markAsRead', 'messageID', messageID)
            // verify required parameter 'markMessageAsReadRequestBody' is not null or undefined
            assertParamExists('markAsRead', 'markMessageAsReadRequestBody', markMessageAsReadRequestBody)
            const localVarPath = `/messages/{MessageID}`
                .replace(`{${"MessageID"}}`, encodeURIComponent(String(messageID !== undefined ? messageID : `-MessageID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: markMessageAsReadRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/{MessageID}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(markMessageAsReadRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send-Message
         * @param {SendMessageRequestBody} sendMessageRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (sendMessageRequestBody: SendMessageRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendMessageRequestBody' is not null or undefined
            assertParamExists('sendMessage', 'sendMessageRequestBody', sendMessageRequestBody)
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sendMessageRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sendMessageRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Mark-Message-As-Read
         * @param {MessagesApiMarkAsReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsRead(requestParameters: MessagesApiMarkAsReadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const markMessageAsReadRequestBody: MarkMessageAsReadRequestBody = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsRead(requestParameters.messageID, markMessageAsReadRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send-Message
         * @param {MessagesApiSendMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(requestParameters: MessagesApiSendMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const sendMessageRequestBody: SendMessageRequestBody = {
                audio: requestParameters.audio,
                contacts: requestParameters.contacts,
                document: requestParameters.document,
                hsm: requestParameters.hsm,
                image: requestParameters.image,
                location: requestParameters.location,
                preview_url: requestParameters.preview_url,
                recipient_type: requestParameters.recipient_type,
                text: requestParameters.text,
                to: requestParameters.to,
                ttl: requestParameters.ttl,
                type: requestParameters.type,
                video: requestParameters.video
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessage(sendMessageRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Mark-Message-As-Read
         * @param {MessagesApiMarkAsReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsRead(requestParameters: MessagesApiMarkAsReadRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markAsRead(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send-Message
         * @param {MessagesApiSendMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(requestParameters: MessagesApiSendMessageRequest, options?: AxiosRequestConfig): AxiosPromise<MessageResponse> {
            return localVarFp.sendMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for markAsRead operation in MessagesApi.
 * @export
 * @interface MessagesApiMarkAsReadRequest
 */
export type MessagesApiMarkAsReadRequest = {
    
    /**
    * Message ID from Webhook
    * @type {string}
    * @memberof MessagesApiMarkAsRead
    */
    readonly messageID: string
    
} & MarkMessageAsReadRequestBody

/**
 * Request parameters for sendMessage operation in MessagesApi.
 * @export
 * @interface MessagesApiSendMessageRequest
 */
export type MessagesApiSendMessageRequest = {
    
} & SendMessageRequestBody

/**
 * MessagesApiGenerated - object-oriented interface
 * @export
 * @class MessagesApiGenerated
 * @extends {BaseAPI}
 */
export class MessagesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Mark-Message-As-Read
     * @param {MessagesApiMarkAsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiGenerated
     */
    public markAsRead(requestParameters: MessagesApiMarkAsReadRequest, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).markAsRead(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send-Message
     * @param {MessagesApiSendMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiGenerated
     */
    public sendMessage(requestParameters: MessagesApiSendMessageRequest, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).sendMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
