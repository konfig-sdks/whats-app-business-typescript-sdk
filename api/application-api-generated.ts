/* tslint:disable */
/* eslint-disable */
/*
WhatsApp Business API

See https://developers.facebook.com/docs/whatsapp

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicationSettings } from '../models';
// @ts-ignore
import { GetMediaProvidersResponse } from '../models';
// @ts-ignore
import { Media } from '../models';
// @ts-ignore
import { MediaProvider } from '../models';
// @ts-ignore
import { Response } from '../models';
// @ts-ignore
import { SetShardsRequestBody } from '../models';
// @ts-ignore
import { Webhooks } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get-Application-Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/application`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/settings/application',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get-Media-Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMediaProviders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/application/media/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/settings/application/media/providers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete-Media-Providers
         * @param {string} providerName Provider Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProvider: async (providerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('removeProvider', 'providerName', providerName)
            const localVarPath = `/settings/application/media/providers/{ProviderName}`
                .replace(`{${"ProviderName"}}`, encodeURIComponent(String(providerName !== undefined ? providerName : `-ProviderName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/settings/application/media/providers/{ProviderName}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset-Application-Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/application`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/settings/application',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set-Shards
         * @param {SetShardsRequestBody} setShardsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setShards: async (setShardsRequestBody: SetShardsRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setShardsRequestBody' is not null or undefined
            assertParamExists('setShards', 'setShardsRequestBody', setShardsRequestBody)
            const localVarPath = `/account/shards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: setShardsRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/shards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(setShardsRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update-Media-Providers
         * @param {Array<MediaProvider>} mediaProvider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaProviders: async (mediaProvider: Array<MediaProvider>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaProvider' is not null or undefined
            assertParamExists('updateMediaProviders', 'mediaProvider', mediaProvider)
            const localVarPath = `/settings/application/media/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: mediaProvider,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/settings/application/media/providers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(mediaProvider, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If a field is not present in the request, no change is made to that setting. For example, if on_call_pager is not sent with the request, the existing configuration for on_call_pager is unchanged.
         * @summary Update-Application-Settings
         * @param {ApplicationSettings} applicationSettings 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings: async (applicationSettings: ApplicationSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationSettings' is not null or undefined
            assertParamExists('updateSettings', 'applicationSettings', applicationSettings)
            const localVarPath = `/settings/application`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: applicationSettings,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/settings/application',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(applicationSettings, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get-Application-Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get-Media-Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMediaProviders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMediaProvidersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMediaProviders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete-Media-Providers
         * @param {ApplicationApiRemoveProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProvider(requestParameters: ApplicationApiRemoveProviderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProvider(requestParameters.providerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reset-Application-Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set-Shards
         * @param {ApplicationApiSetShardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setShards(requestParameters: ApplicationApiSetShardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const setShardsRequestBody: SetShardsRequestBody = {
                cc: requestParameters.cc,
                phone_number: requestParameters.phone_number,
                pin: requestParameters.pin,
                shards: requestParameters.shards
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setShards(setShardsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update-Media-Providers
         * @param {ApplicationApiUpdateMediaProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMediaProviders(requestParameters: ApplicationApiUpdateMediaProvidersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const mediaProvider: Array<MediaProvider> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMediaProviders(mediaProvider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If a field is not present in the request, no change is made to that setting. For example, if on_call_pager is not sent with the request, the existing configuration for on_call_pager is unchanged.
         * @summary Update-Application-Settings
         * @param {ApplicationApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettings(requestParameters: ApplicationApiUpdateSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const applicationSettings: ApplicationSettings = {
                callback_backoff_delay_ms: requestParameters.callback_backoff_delay_ms,
                callback_persist: requestParameters.callback_persist,
                heartbeat_interval: requestParameters.heartbeat_interval,
                max_callback_backoff_delay_ms: requestParameters.max_callback_backoff_delay_ms,
                media: requestParameters.media,
                on_call_pager: requestParameters.on_call_pager,
                pass_through: requestParameters.pass_through,
                sent_status: requestParameters.sent_status,
                unhealthy_interval: requestParameters.unhealthy_interval,
                webhooks: requestParameters.webhooks
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettings(applicationSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get-Application-Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options?: AxiosRequestConfig): AxiosPromise<ApplicationSettings> {
            return localVarFp.getSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get-Media-Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMediaProviders(options?: AxiosRequestConfig): AxiosPromise<GetMediaProvidersResponse> {
            return localVarFp.listMediaProviders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete-Media-Providers
         * @param {ApplicationApiRemoveProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProvider(requestParameters: ApplicationApiRemoveProviderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeProvider(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset-Application-Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSettings(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set-Shards
         * @param {ApplicationApiSetShardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setShards(requestParameters: ApplicationApiSetShardsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setShards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update-Media-Providers
         * @param {ApplicationApiUpdateMediaProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaProviders(requestParameters: ApplicationApiUpdateMediaProvidersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMediaProviders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * If a field is not present in the request, no change is made to that setting. For example, if on_call_pager is not sent with the request, the existing configuration for on_call_pager is unchanged.
         * @summary Update-Application-Settings
         * @param {ApplicationApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(requestParameters: ApplicationApiUpdateSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.updateSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for removeProvider operation in ApplicationApi.
 * @export
 * @interface ApplicationApiRemoveProviderRequest
 */
export type ApplicationApiRemoveProviderRequest = {
    
    /**
    * Provider Name
    * @type {string}
    * @memberof ApplicationApiRemoveProvider
    */
    readonly providerName: string
    
}

/**
 * Request parameters for setShards operation in ApplicationApi.
 * @export
 * @interface ApplicationApiSetShardsRequest
 */
export type ApplicationApiSetShardsRequest = {
    
} & SetShardsRequestBody

/**
 * Request parameters for updateMediaProviders operation in ApplicationApi.
 * @export
 * @interface ApplicationApiUpdateMediaProvidersRequest
 */
export type ApplicationApiUpdateMediaProvidersRequest = Array<MediaProvider>

/**
 * Request parameters for updateSettings operation in ApplicationApi.
 * @export
 * @interface ApplicationApiUpdateSettingsRequest
 */
export type ApplicationApiUpdateSettingsRequest = {
    
} & ApplicationSettings

/**
 * ApplicationApiGenerated - object-oriented interface
 * @export
 * @class ApplicationApiGenerated
 * @extends {BaseAPI}
 */
export class ApplicationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get-Application-Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public getSettings(options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).getSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get-Media-Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public listMediaProviders(options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).listMediaProviders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete-Media-Providers
     * @param {ApplicationApiRemoveProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public removeProvider(requestParameters: ApplicationApiRemoveProviderRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).removeProvider(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset-Application-Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public resetSettings(options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).resetSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set-Shards
     * @param {ApplicationApiSetShardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public setShards(requestParameters: ApplicationApiSetShardsRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).setShards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update-Media-Providers
     * @param {ApplicationApiUpdateMediaProvidersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public updateMediaProviders(requestParameters: ApplicationApiUpdateMediaProvidersRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).updateMediaProviders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If a field is not present in the request, no change is made to that setting. For example, if on_call_pager is not sent with the request, the existing configuration for on_call_pager is unchanged.
     * @summary Update-Application-Settings
     * @param {ApplicationApiUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public updateSettings(requestParameters: ApplicationApiUpdateSettingsRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).updateSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
