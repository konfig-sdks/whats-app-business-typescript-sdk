/* tslint:disable */
/* eslint-disable */
/*
WhatsApp Business API

See https://developers.facebook.com/docs/whatsapp

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateGroupRequestBody } from '../models';
// @ts-ignore
import { GroupAdminRequestBody } from '../models';
// @ts-ignore
import { GroupInviteResponse } from '../models';
// @ts-ignore
import { GroupResponse } from '../models';
// @ts-ignore
import { GroupsDeleteGroupIconRequest } from '../models';
// @ts-ignore
import { GroupsResponse } from '../models';
// @ts-ignore
import { GroupsSetGroupIconRequest } from '../models';
// @ts-ignore
import { RemoveGroupParticipantRequestBody } from '../models';
// @ts-ignore
import { UpdateGroupInfoRequestBody } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create-Group
         * @param {CreateGroupRequestBody} createGroupRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (createGroupRequestBody: CreateGroupRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGroupRequestBody' is not null or undefined
            assertParamExists('createGroup', 'createGroupRequestBody', createGroupRequestBody)
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createGroupRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete-Group-Icon
         * @param {string} groupId 
         * @param {Uint8Array | File | buffer.File} file 
         * @param {GroupsDeleteGroupIconRequest} [groupsDeleteGroupIconRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupIcon: async (groupId: string, file: Uint8Array | File | buffer.File, groupsDeleteGroupIconRequest?: GroupsDeleteGroupIconRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupIcon', 'groupId', groupId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('deleteGroupIcon', 'file', file)
            const localVarPath = `/groups/{GroupId}/icon`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (file !== undefined) {
                await addFormParam('File', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: groupsDeleteGroupIconRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/icon',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete-Group-Invite
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvite: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteInvite', 'groupId', groupId)
            const localVarPath = `/groups/{GroupId}/invite`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/invite',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Demote-Group-Admin
         * @param {string} groupId 
         * @param {GroupAdminRequestBody} groupAdminRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demoteAdmin: async (groupId: string, groupAdminRequestBody: GroupAdminRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('demoteAdmin', 'groupId', groupId)
            // verify required parameter 'groupAdminRequestBody' is not null or undefined
            assertParamExists('demoteAdmin', 'groupAdminRequestBody', groupAdminRequestBody)
            const localVarPath = `/groups/{GroupId}/admins`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupAdminRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/admins',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupAdminRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get-All-Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get-Group-Icon-Binary
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconBinary: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getIconBinary', 'groupId', groupId)
            const localVarPath = `/groups/{GroupId}/icon`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/icon',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get-Group-Info
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getInfo', 'groupId', groupId)
            const localVarPath = `/groups/{GroupId}`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get-Group-Invite
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInviteDetails: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getInviteDetails', 'groupId', groupId)
            const localVarPath = `/groups/{GroupId}/invite`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/invite',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave-Group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroup: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('leaveGroup', 'groupId', groupId)
            const localVarPath = `/groups/{GroupId}/leave`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/leave',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Promote-To-Group-Admin
         * @param {string} groupId 
         * @param {GroupAdminRequestBody} groupAdminRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteToAdmin: async (groupId: string, groupAdminRequestBody: GroupAdminRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('promoteToAdmin', 'groupId', groupId)
            // verify required parameter 'groupAdminRequestBody' is not null or undefined
            assertParamExists('promoteToAdmin', 'groupAdminRequestBody', groupAdminRequestBody)
            const localVarPath = `/groups/{GroupId}/admins`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupAdminRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/admins',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupAdminRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove-Group-Participant
         * @param {string} groupId 
         * @param {RemoveGroupParticipantRequestBody} removeGroupParticipantRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParticipant: async (groupId: string, removeGroupParticipantRequestBody: RemoveGroupParticipantRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('removeParticipant', 'groupId', groupId)
            // verify required parameter 'removeGroupParticipantRequestBody' is not null or undefined
            assertParamExists('removeParticipant', 'removeGroupParticipantRequestBody', removeGroupParticipantRequestBody)
            const localVarPath = `/groups/{GroupId}/participants`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: removeGroupParticipantRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/participants',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(removeGroupParticipantRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set-Group-Icon
         * @param {string} groupId 
         * @param {Uint8Array | File | buffer.File} file 
         * @param {GroupsSetGroupIconRequest} [groupsSetGroupIconRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGroupIcon: async (groupId: string, file: Uint8Array | File | buffer.File, groupsSetGroupIconRequest?: GroupsSetGroupIconRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('setGroupIcon', 'groupId', groupId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('setGroupIcon', 'file', file)
            const localVarPath = `/groups/{GroupId}/icon`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (file !== undefined) {
                await addFormParam('File', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: groupsSetGroupIconRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}/icon',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update-Group-Info
         * @param {string} groupId 
         * @param {UpdateGroupInfoRequestBody} updateGroupInfoRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInfo: async (groupId: string, updateGroupInfoRequestBody: UpdateGroupInfoRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateInfo', 'groupId', groupId)
            // verify required parameter 'updateGroupInfoRequestBody' is not null or undefined
            assertParamExists('updateInfo', 'updateGroupInfoRequestBody', updateGroupInfoRequestBody)
            const localVarPath = `/groups/{GroupId}`
                .replace(`{${"GroupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-GroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateGroupInfoRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{GroupId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupInfoRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create-Group
         * @param {GroupsApiCreateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(requestParameters: GroupsApiCreateGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsResponse>> {
            const createGroupRequestBody: CreateGroupRequestBody = {
                subject: requestParameters.subject
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(createGroupRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete-Group-Icon
         * @param {GroupsApiDeleteGroupIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupIcon(requestParameters: GroupsApiDeleteGroupIconRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const groupsDeleteGroupIconRequest: GroupsDeleteGroupIconRequest = {
                File: requestParameters.File
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupIcon(requestParameters.groupId, requestParameters.file, groupsDeleteGroupIconRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete-Group-Invite
         * @param {GroupsApiDeleteInviteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInvite(requestParameters: GroupsApiDeleteInviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInvite(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Demote-Group-Admin
         * @param {GroupsApiDemoteAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async demoteAdmin(requestParameters: GroupsApiDemoteAdminRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const groupAdminRequestBody: GroupAdminRequestBody = {
                wa_ids: requestParameters.wa_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.demoteAdmin(requestParameters.groupId, groupAdminRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get-All-Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get-Group-Icon-Binary
         * @param {GroupsApiGetIconBinaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIconBinary(requestParameters: GroupsApiGetIconBinaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIconBinary(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get-Group-Info
         * @param {GroupsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: GroupsApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get-Group-Invite
         * @param {GroupsApiGetInviteDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInviteDetails(requestParameters: GroupsApiGetInviteDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupInviteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInviteDetails(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Leave-Group
         * @param {GroupsApiLeaveGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveGroup(requestParameters: GroupsApiLeaveGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveGroup(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Promote-To-Group-Admin
         * @param {GroupsApiPromoteToAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoteToAdmin(requestParameters: GroupsApiPromoteToAdminRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const groupAdminRequestBody: GroupAdminRequestBody = {
                wa_ids: requestParameters.wa_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoteToAdmin(requestParameters.groupId, groupAdminRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove-Group-Participant
         * @param {GroupsApiRemoveParticipantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeParticipant(requestParameters: GroupsApiRemoveParticipantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const removeGroupParticipantRequestBody: RemoveGroupParticipantRequestBody = {
                wa_ids: requestParameters.wa_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParticipant(requestParameters.groupId, removeGroupParticipantRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set-Group-Icon
         * @param {GroupsApiSetGroupIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setGroupIcon(requestParameters: GroupsApiSetGroupIconRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const groupsSetGroupIconRequest: GroupsSetGroupIconRequest = {
                File: requestParameters.File
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setGroupIcon(requestParameters.groupId, requestParameters.file, groupsSetGroupIconRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update-Group-Info
         * @param {GroupsApiUpdateInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInfo(requestParameters: GroupsApiUpdateInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateGroupInfoRequestBody: UpdateGroupInfoRequestBody = {
                subject: requestParameters.subject
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInfo(requestParameters.groupId, updateGroupInfoRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create-Group
         * @param {GroupsApiCreateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(requestParameters: GroupsApiCreateGroupRequest, options?: AxiosRequestConfig): AxiosPromise<GroupsResponse> {
            return localVarFp.createGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete-Group-Icon
         * @param {GroupsApiDeleteGroupIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupIcon(requestParameters: GroupsApiDeleteGroupIconRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGroupIcon(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete-Group-Invite
         * @param {GroupsApiDeleteInviteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvite(requestParameters: GroupsApiDeleteInviteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteInvite(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Demote-Group-Admin
         * @param {GroupsApiDemoteAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demoteAdmin(requestParameters: GroupsApiDemoteAdminRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.demoteAdmin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get-All-Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: AxiosRequestConfig): AxiosPromise<GroupsResponse> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get-Group-Icon-Binary
         * @param {GroupsApiGetIconBinaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconBinary(requestParameters: GroupsApiGetIconBinaryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getIconBinary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get-Group-Info
         * @param {GroupsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: GroupsApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<GroupResponse> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get-Group-Invite
         * @param {GroupsApiGetInviteDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInviteDetails(requestParameters: GroupsApiGetInviteDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<GroupInviteResponse> {
            return localVarFp.getInviteDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave-Group
         * @param {GroupsApiLeaveGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroup(requestParameters: GroupsApiLeaveGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.leaveGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Promote-To-Group-Admin
         * @param {GroupsApiPromoteToAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteToAdmin(requestParameters: GroupsApiPromoteToAdminRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promoteToAdmin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove-Group-Participant
         * @param {GroupsApiRemoveParticipantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParticipant(requestParameters: GroupsApiRemoveParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeParticipant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set-Group-Icon
         * @param {GroupsApiSetGroupIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGroupIcon(requestParameters: GroupsApiSetGroupIconRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setGroupIcon(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update-Group-Info
         * @param {GroupsApiUpdateInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInfo(requestParameters: GroupsApiUpdateInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiCreateGroupRequest
 */
export type GroupsApiCreateGroupRequest = {
    
} & CreateGroupRequestBody

/**
 * Request parameters for deleteGroupIcon operation in GroupsApi.
 * @export
 * @interface GroupsApiDeleteGroupIconRequest
 */
export type GroupsApiDeleteGroupIconRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiDeleteGroupIcon
    */
    readonly groupId: string
    
    /**
    * 
    * @type {Uint8Array | File | buffer.File}
    * @memberof GroupsApiDeleteGroupIcon
    */
    readonly file: Uint8Array | File | buffer.File
    
} & GroupsDeleteGroupIconRequest

/**
 * Request parameters for deleteInvite operation in GroupsApi.
 * @export
 * @interface GroupsApiDeleteInviteRequest
 */
export type GroupsApiDeleteInviteRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiDeleteInvite
    */
    readonly groupId: string
    
}

/**
 * Request parameters for demoteAdmin operation in GroupsApi.
 * @export
 * @interface GroupsApiDemoteAdminRequest
 */
export type GroupsApiDemoteAdminRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiDemoteAdmin
    */
    readonly groupId: string
    
} & GroupAdminRequestBody

/**
 * Request parameters for getIconBinary operation in GroupsApi.
 * @export
 * @interface GroupsApiGetIconBinaryRequest
 */
export type GroupsApiGetIconBinaryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiGetIconBinary
    */
    readonly groupId: string
    
}

/**
 * Request parameters for getInfo operation in GroupsApi.
 * @export
 * @interface GroupsApiGetInfoRequest
 */
export type GroupsApiGetInfoRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiGetInfo
    */
    readonly groupId: string
    
}

/**
 * Request parameters for getInviteDetails operation in GroupsApi.
 * @export
 * @interface GroupsApiGetInviteDetailsRequest
 */
export type GroupsApiGetInviteDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiGetInviteDetails
    */
    readonly groupId: string
    
}

/**
 * Request parameters for leaveGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiLeaveGroupRequest
 */
export type GroupsApiLeaveGroupRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiLeaveGroup
    */
    readonly groupId: string
    
}

/**
 * Request parameters for promoteToAdmin operation in GroupsApi.
 * @export
 * @interface GroupsApiPromoteToAdminRequest
 */
export type GroupsApiPromoteToAdminRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiPromoteToAdmin
    */
    readonly groupId: string
    
} & GroupAdminRequestBody

/**
 * Request parameters for removeParticipant operation in GroupsApi.
 * @export
 * @interface GroupsApiRemoveParticipantRequest
 */
export type GroupsApiRemoveParticipantRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiRemoveParticipant
    */
    readonly groupId: string
    
} & RemoveGroupParticipantRequestBody

/**
 * Request parameters for setGroupIcon operation in GroupsApi.
 * @export
 * @interface GroupsApiSetGroupIconRequest
 */
export type GroupsApiSetGroupIconRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiSetGroupIcon
    */
    readonly groupId: string
    
    /**
    * 
    * @type {Uint8Array | File | buffer.File}
    * @memberof GroupsApiSetGroupIcon
    */
    readonly file: Uint8Array | File | buffer.File
    
} & GroupsSetGroupIconRequest

/**
 * Request parameters for updateInfo operation in GroupsApi.
 * @export
 * @interface GroupsApiUpdateInfoRequest
 */
export type GroupsApiUpdateInfoRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GroupsApiUpdateInfo
    */
    readonly groupId: string
    
} & UpdateGroupInfoRequestBody

/**
 * GroupsApiGenerated - object-oriented interface
 * @export
 * @class GroupsApiGenerated
 * @extends {BaseAPI}
 */
export class GroupsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create-Group
     * @param {GroupsApiCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public createGroup(requestParameters: GroupsApiCreateGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete-Group-Icon
     * @param {GroupsApiDeleteGroupIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public deleteGroupIcon(requestParameters: GroupsApiDeleteGroupIconRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupIcon(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete-Group-Invite
     * @param {GroupsApiDeleteInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public deleteInvite(requestParameters: GroupsApiDeleteInviteRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteInvite(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Demote-Group-Admin
     * @param {GroupsApiDemoteAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public demoteAdmin(requestParameters: GroupsApiDemoteAdminRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).demoteAdmin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get-All-Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public getAll(options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get-Group-Icon-Binary
     * @param {GroupsApiGetIconBinaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public getIconBinary(requestParameters: GroupsApiGetIconBinaryRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getIconBinary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get-Group-Info
     * @param {GroupsApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public getInfo(requestParameters: GroupsApiGetInfoRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get-Group-Invite
     * @param {GroupsApiGetInviteDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public getInviteDetails(requestParameters: GroupsApiGetInviteDetailsRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getInviteDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leave-Group
     * @param {GroupsApiLeaveGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public leaveGroup(requestParameters: GroupsApiLeaveGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).leaveGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Promote-To-Group-Admin
     * @param {GroupsApiPromoteToAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public promoteToAdmin(requestParameters: GroupsApiPromoteToAdminRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).promoteToAdmin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove-Group-Participant
     * @param {GroupsApiRemoveParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public removeParticipant(requestParameters: GroupsApiRemoveParticipantRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).removeParticipant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set-Group-Icon
     * @param {GroupsApiSetGroupIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public setGroupIcon(requestParameters: GroupsApiSetGroupIconRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).setGroupIcon(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update-Group-Info
     * @param {GroupsApiUpdateInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public updateInfo(requestParameters: GroupsApiUpdateInfoRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
