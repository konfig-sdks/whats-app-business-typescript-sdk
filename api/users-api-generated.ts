/* tslint:disable */
/* eslint-disable */
/*
WhatsApp Business API

See https://developers.facebook.com/docs/whatsapp

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateUserRequestBody } from '../models';
// @ts-ignore
import { DetailedUserResponse } from '../models';
// @ts-ignore
import { LoginAdminRequestBody } from '../models';
// @ts-ignore
import { UpdateUserRequestBody } from '../models';
// @ts-ignore
import { UserLoginResponse } from '../models';
// @ts-ignore
import { UserResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create-User
         * @param {CreateUserRequestBody} createUserRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserRequestBody: CreateUserRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequestBody' is not null or undefined
            assertParamExists('createUser', 'createUserRequestBody', createUserRequestBody)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createUserRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get-User
         * @param {string} userUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUsername: async (userUsername: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUsername' is not null or undefined
            assertParamExists('getByUsername', 'userUsername', userUsername)
            const localVarPath = `/users/{UserUsername}`
                .replace(`{${"UserUsername"}}`, encodeURIComponent(String(userUsername !== undefined ? userUsername : `-UserUsername-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{UserUsername}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login-User
         * @param {LoginAdminRequestBody} [loginAdminRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performLogin: async (loginAdminRequestBody?: LoginAdminRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpBasic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: loginAdminRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/login',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(loginAdminRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout-User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/logout',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete-User
         * @param {string} userUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser: async (userUsername: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUsername' is not null or undefined
            assertParamExists('removeUser', 'userUsername', userUsername)
            const localVarPath = `/users/{UserUsername}`
                .replace(`{${"UserUsername"}}`, encodeURIComponent(String(userUsername !== undefined ? userUsername : `-UserUsername-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{UserUsername}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update-User
         * @param {string} userUsername 
         * @param {UpdateUserRequestBody} updateUserRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userUsername: string, updateUserRequestBody: UpdateUserRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUsername' is not null or undefined
            assertParamExists('updateUser', 'userUsername', userUsername)
            // verify required parameter 'updateUserRequestBody' is not null or undefined
            assertParamExists('updateUser', 'updateUserRequestBody', updateUserRequestBody)
            const localVarPath = `/users/{UserUsername}`
                .replace(`{${"UserUsername"}}`, encodeURIComponent(String(userUsername !== undefined ? userUsername : `-UserUsername-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateUserRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{UserUsername}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create-User
         * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const createUserRequestBody: CreateUserRequestBody = {
                password: requestParameters.password,
                username: requestParameters.username
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get-User
         * @param {UsersApiGetByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUsername(requestParameters: UsersApiGetByUsernameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByUsername(requestParameters.userUsername, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login-User
         * @param {UsersApiPerformLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performLogin(requestParameters: UsersApiPerformLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLoginResponse>> {
            const loginAdminRequestBody: LoginAdminRequestBody = {
                new_password: requestParameters.new_password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performLogin(loginAdminRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logout-User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.performLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete-User
         * @param {UsersApiRemoveUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUser(requestParameters: UsersApiRemoveUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUser(requestParameters.userUsername, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update-User
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const updateUserRequestBody: UpdateUserRequestBody = {
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(requestParameters.userUsername, updateUserRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create-User
         * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.createUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get-User
         * @param {UsersApiGetByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUsername(requestParameters: UsersApiGetByUsernameRequest, options?: AxiosRequestConfig): AxiosPromise<DetailedUserResponse> {
            return localVarFp.getByUsername(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login-User
         * @param {UsersApiPerformLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performLogin(requestParameters: UsersApiPerformLoginRequest, options?: AxiosRequestConfig): AxiosPromise<UserLoginResponse> {
            return localVarFp.performLogin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout-User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performLogout(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.performLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete-User
         * @param {UsersApiRemoveUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser(requestParameters: UsersApiRemoveUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.removeUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update-User
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.updateUser(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export type UsersApiCreateUserRequest = {
    
} & CreateUserRequestBody

/**
 * Request parameters for getByUsername operation in UsersApi.
 * @export
 * @interface UsersApiGetByUsernameRequest
 */
export type UsersApiGetByUsernameRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetByUsername
    */
    readonly userUsername: string
    
}

/**
 * Request parameters for performLogin operation in UsersApi.
 * @export
 * @interface UsersApiPerformLoginRequest
 */
export type UsersApiPerformLoginRequest = {
    
} & LoginAdminRequestBody

/**
 * Request parameters for removeUser operation in UsersApi.
 * @export
 * @interface UsersApiRemoveUserRequest
 */
export type UsersApiRemoveUserRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiRemoveUser
    */
    readonly userUsername: string
    
}

/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export type UsersApiUpdateUserRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdateUser
    */
    readonly userUsername: string
    
} & UpdateUserRequestBody

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create-User
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get-User
     * @param {UsersApiGetByUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getByUsername(requestParameters: UsersApiGetByUsernameRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getByUsername(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login-User
     * @param {UsersApiPerformLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public performLogin(requestParameters: UsersApiPerformLoginRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).performLogin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout-User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public performLogout(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).performLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete-User
     * @param {UsersApiRemoveUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public removeUser(requestParameters: UsersApiRemoveUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).removeUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update-User
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
